<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Question Paper Generation System</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #333;
            color: #fff;
        }
        .content {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background-color: #222;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
        }
        h1, h2 {
            color: #00aaff;
        }
        .section {
            margin-bottom: 30px;
        }
        .section h2 {
            margin-top: 0;
        }
        p {
            line-height: 1.6;
            margin-bottom: 10px;
        }
        .button-container {
            margin-top: 10px;
            text-align: center;
        }
        .btn {
            display: inline-block;
            padding: 12px 24px;
            color: #fff;
            text-decoration: none;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin-bottom: 10px;
            font-size: 16px;
            outline: none;
        }
        .generate-btn {
            background-color: #00cc00;
            color: #fff;
        }
        .upload-btn {
            background-color: #00aaff;
        }
        .preview-btn {
            background-color: #ff9933;
        }
        .download-btn {
            background-color: #00cc00;
            color: #fff;
        }
        .edit-btn {
            background-color: #9966ff;
        }
        .btn:hover {
            filter: brightness(85%);
        }
        .input-label {
            color: #00aaff;
            font-weight: bold;
            margin-right: 10px;
            display: block;
            margin-bottom: 5px;
        }
        .input-field {
            width: 150px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #00aaff;
            background-color: #444;
            color: #fff;
            outline: none;
        }
        #review-edit-textarea {
            width: 100%;
            height: 300px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #00aaff;
            background-color: #444;
            color: #fff;
            resize: none;
            margin-bottom: 10px;
            outline: none;
        }
        /* Additional styles for variants */
        .variant-container {
            margin-bottom: 20px;
            border: 1px solid #555;
            padding: 10px;
            border-radius: 5px;
        }
        .variant-container textarea {
            width: 100%;
            height: 150px;
            margin-bottom: 10px;
            padding: 8px;
            border: 1px solid #00aaff;
            border-radius: 5px;
            background-color: #444;
            color: #fff;
            resize: none;
            outline: none;
        }
        .variant-container .download-btn {
            display: block;
            margin-top: 10px;
        }
    </style>
</head>
<body>
<div class="content">
    
    <h1>Question Paper Generation System</h1>
    <p>Welcome to the Question Paper Generation System! In this system, you can seamlessly create question papers for various exams. Begin by uploading a sample question paper, along with clear grading rubrics and relevant course materials. Utilize variability parameters to customize the question papers to your teaching objectives. Expect multiple versions of question papers covering a range of topics and difficulty levels, accompanied by corresponding sets of accurate answers. Additionally, comprehensive documentation and user guides are provided for ease of use.</p>
    <div class="section">
        <h2>Exam Type and Upload:</h2>
        <p>Select the type of exam, book type, and enter the number of variants before uploading.</p>
        <div class="button-container">
            <!-- Exam Type -->
            <label for="exam-type-select" class="input-label">Type of Exam:</label>
            <select id="exam-type-select" class="input-field">
                <option value="Quiz">Quiz</option>
                <option value="Mid-semester exam">Mid-semester exam</option>
                <option value="Comprehensive exam">Comprehensive exam</option>
            </select>
            <!-- Book Type -->
            <label for="book-type-select" class="input-label">Open or Close book:</label>
            <select id="book-type-select" class="input-field">
                <option value="Open">Open Book</option>
                <option value="Closed">Closed Book</option>
            </select>
            <br>
            <!-- Number of Variants -->
            <label for="number-of-variants" class="input-label">Number of Variants:</label>
            <input type="number" id="number-of-variants" class="input-field" min="1" max="10" value="1">
            <br><br>
            <!-- Upload Buttons -->
            <label for="sample-paper-upload" class="btn upload-btn">Upload Base Question Set</label>
            <input type="file" id="sample-paper-upload" style="display: none;">
            <label for="solution-upload" class="btn upload-btn">Upload Solution for the set</label>
            <input type="file" id="solution-upload" style="display: none;">
            <label for="course-materials-upload" class="btn upload-btn">Upload Course Materials</label>
            <input type="file" id="course-materials-upload" style="display: none;">
            <br>
            <br>
            <!-- File name display -->
            <span id="uploaded-file-name" style="display: none;"></span>
            <!-- Generate Button -->
            <button id="generate-btn" class="btn generate-btn" style="display: none;">Generate</button>
        </div>
    </div>

    <div class="section">
        <div class="button-container">
            <a id="preview-sample-btn" class="btn preview-btn" style="display: none;">Preview generated sheets</a>
        </div>
    </div>

    <div class="section">
        <h2>Review and Edit:</h2>
        <p>Review and edit the content of the generated sheets. This will be visible after upload and processing step</p>
    </div>

    <div class="section download">
        <h2>Download Variants:</h2>
        <p>Upon uploading the Base Question Paper, the available download options for each variant will become visible.</p>
        <!-- Textareas and download buttons will be dynamically added here -->
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    var samplePaperInput = document.getElementById('sample-paper-upload');
    var generateBtn = document.getElementById('generate-btn');
    var numberOfVariantsInput = document.getElementById('number-of-variants');
    var uploadedFileName = document.getElementById('uploaded-file-name');
    var downloadSection = document.querySelector('.section.download');
    
    samplePaperInput.addEventListener('change', function () {
        var file = samplePaperInput.files[0];
        var reader = new FileReader();
        
        reader.onload = function (e) {
            var content = e.target.result;
            var variants = parseInt(numberOfVariantsInput.value);

            // Display uploaded file name
            uploadedFileName.innerText = 'Uploaded File: ' + file.name;
            uploadedFileName.style.display = 'block';

            // Show generate button
            generateBtn.style.display = 'inline-block';
        };
        
        reader.readAsText(file);
    });
    
    generateBtn.addEventListener('click', function () {
        var file = samplePaperInput.files[0];
        var reader = new FileReader();

        reader.onload = function (e) {
            var content = e.target.result;
            var variants = parseInt(numberOfVariantsInput.value);

            // Remove existing textareas and download buttons
            downloadSection.innerHTML = '';

            for (var i = 0; i < variants; i++) {
                // Create variant container
                var variantContainer = document.createElement('div');
                variantContainer.classList.add('variant-container');
                downloadSection.appendChild(variantContainer);

                // Create Set label for each variant
                var setLabel = document.createElement('p');
                setLabel.innerText = 'Set ' + (i + 1);
                variantContainer.appendChild(setLabel);

                // Create textarea for each variant
                var textarea = document.createElement('textarea');
                textarea.classList.add('review-edit-textarea');
                textarea.value = 'Set ' + (i + 1) + '\n' + content; // Include Set label in textarea
                variantContainer.appendChild(textarea);

                // Create download button for each variant
                var downloadBtn = document.createElement('a');
                downloadBtn.classList.add('btn', 'download-btn');
                downloadBtn.innerText = 'Download Variant ' + (i + 1);
                downloadBtn.setAttribute('download', 'variant_' + (i + 1) + '.txt');
                variantContainer.appendChild(downloadBtn);

                // Add event listener to download button
                (function(i) {
                    downloadBtn.addEventListener('click', function () {
                        var variantContent = 'Set ' + (i + 1) + '\n' + content; // Include Set label in downloaded file
                        var blob = new Blob([variantContent], { type: 'text/plain' });
                        this.href = URL.createObjectURL(blob);
                    });
                })(i); // Pass i to immediately invoked function to capture its value
            }
        };

        reader.readAsText(file);
    });
});
</script>







</body>
</html>





{% macro display_files(course_materials, links, user_group, user_section, id, indent, display_file_url, path, folder_path, directory_priorities, material_list, date_format, folder_ids, seen,  folder_visibilities, current_path) %}
    {% for name, course_material in course_materials %}
        {% set sub_path = "#{current_path}/#{name}" %}
        {% if course_material is iterable %}
            {{ _self.display_folder(name, course_material, links, user_group, user_section, id ~ "d" ~ loop.index, indent, display_file_url, path ~ "/" ~ name, folder_path ~ "/" ~ name, directory_priorities, material_list, date_format, folder_ids, seen,  folder_visibilities, sub_path) }}
        {% else %}
            {{ _self.display_file(name, course_material, links, user_group, user_section, id ~ "f" ~ loop.index, indent, display_file_url, path ~ "/" ~ name, date_format, folder_ids, seen) }}
        {% endif %}
    {% endfor %}
{% endmacro %}

{% macro display_file(name, course_material, links, user_group, user_section, id, indent, display_file_url, path, date_format, folder_ids, seen) %}
    {% if user_group < 4 or ( not course_material.isHiddenFromStudents and (course_material.isSectionAllowed(user_section)) ) %}
        <div class="file-container">
            <div class="file-viewer">
                {% if course_material.isLink %}
                    <i class="fas fa-link" style="vertical-align: text-bottom;"></i>
                    <a href="{{ course_material.getUrl }}" onclick="markViewed([{{ course_material.getId }}])" onauxclick="markViewed([{{ course_material.getId }}])">{{ course_material.getTitle }}</a>
                {% else %}
                    {% set displayName = course_material.getTitle|default(name) %}
                    <i class="fas fa-file" style="vertical-align: text-bottom;"></i>
                    {% set extension = name|split('.')|last|lower %}
                    {% if '.' ~ extension in ['.pdf', '.jpg', '.jpeg', '.c', '.cpp', '.s', '.twig', '.py', '.java', '.png', '.txt', '.h', '.html', '.php', '.js', '.sql', '.sh', '.md', '.csv', '.salsa', '.erl', '.oz', '.pl', '.hs', '.gif'] %}
                        <a class="popout-item" target="_blank" href="{{ links[course_material.getId] }}" aria-label="Pop up {{ displayName }} in a new window" tabindex="0" style="text-decoration: none;">{{ name }} <i class="fas fa-window-restore" title="Pop up the file in a new window"></i></a>
                    {% else %}
                        {{ displayName }}
                    {% endif %}
                    <a class="key_to_click" onclick='downloadCourseMaterial("{{ course_material.getId }}")' aria-label="Download {{ displayName }}" tabindex="0"><i class="fas fa-download" title="Download the file"></i></a>
                {% endif %}
                {% if user_group == 1 %}
                    {% set title_name = course_material.getTitle %}
                    {% if course_material.isLink %}
                        {% set url_url = course_material.getUrl %}
                    {% else %}
                        {% set url_url = "" %}
                    {% endif %}
                    <a
                        class="key_to_click"
                        tabindex="0"
                        onclick='newEditCourseMaterialsForm(this)'
                        data-id="{{ course_material.getId }}"
                        data-priority="{{ course_material.getPriority }}"
                        data-sections={{course_material.getSections|map(s => s.getSectionId)|json_encode|raw}}
                        data-hidden-state="{{course_material.isHiddenFromStudents}}"
                        data-release-time="{{ course_material.getReleaseDate|date(date_format) }}"
                        data-is-link="{{ course_material.isLink }}" data-title="{{ title_name }}"
                        data-link-url="{{ url_url }}"
                        data-path = "{{ path }}"
                    >
                        <i class="fas fa-pencil-alt black-btn" aria-hidden="true" style="font-size: 16px; margin: 5px;"></i>
                    </a>
                    <a class="key_to_click" tabindex="0" onclick='newDeleteCourseMaterialForm("{{ course_material.getId }}", "{{ name }}");' aria-label="Delete {{ name }}"> <i class="fas fa-trash" title="Delete the file" style="font-size: 16px; margin: 5px;"></i></a>
                    <label for="date_to_release_{{ id }}">Share to student on</label>
                    <input name="release_date" id="date_to_release_{{ id }}" class="date_picker" type="text" size="26"  value="{{ course_material.getReleaseDate|date(date_format) }}"/>
                {% if not course_material.getSections|length == 0 %}
                {% if course_material.isHiddenFromStudents %}
                    <span>Sections (Hidden):
                        {{course_material.getSections|sort|map(s => s.getSectionId)|join(',')}}
                        </span>
                {% else %}
                    <span>Sections:
                        {{course_material.getSections|sort|map(s => s.getSectionId)|join(',')}}
                        </span>
                {% endif %}

                {% endif %}

                    <script>
                        function determineRelease(inputID){
                            const now = new Date();

                            function pad(str){
                                return ('0'+str).slice(-2);
                            }

                            const date = now.getFullYear()+'-'+pad(now.getMonth()+1)+'-'+pad(now.getDate());
                            const time = pad(now.getHours())+":"+pad(now.getMinutes())+":"+pad(now.getSeconds());
                            let currentDT = date+' '+time;
                            let neverDT = (now.getFullYear()+10)+'-'+pad(now.getMonth()+1)+'-'+pad(now.getDate())+' '+time;

                            //get the value in each file so the color can be assigned
                            //based on the time chosen
                            const inputDT = document.getElementById(inputID);
                            let fileDT = inputDT.value;

                            fileDT = fileDT.replace(/\s/, 'T');
                            currentDT = currentDT.replace(/\s/, 'T');
                            neverDT = neverDT.replace(/\s/, 'T');

                            //also custom colors for this page for readability
                            if(new Date(fileDT).getTime() <= new Date(currentDT).getTime()){
                                return green;
                            } else if(new Date(fileDT).getTime() >= new Date(neverDT).getTime()){
                                return red;
                            } else {
                                return yellow;
                            }
                        }
                        document.getElementById('date_to_release_{{ id }}').style.backgroundColor= determineRelease('date_to_release_{{ id }}');
                    </script>
                {% endif %}
                {% if not seen[course_material.getPath] %}
                    <span class="badge course-material-badge" >NEW</span>
                {% endif %}
            </div>
            <div class="file-viewer-data" id="file_viewer_{{ id }}" style="margin-left:{{ indent * -15 }}px" data-file_name="{{ name }}" data-file_url="{{ course_material.getPath }}"></div>
        </div>
    {% endif %}
{% endmacro %}

{% macro display_folder(name, course_materials, links, user_group, user_section, id, indent, display_file_url, path, folder_path, directory_priorities, material_list, date_format, folder_ids, seen, folder_visibilities, current_path) %}
    {% if indent == -1 %}
        {{ _self.display_files(course_materials, links, user_group, user_section, id, indent + 1, display_file_url, path, folder_path, directory_priorities,
        material_list, date_format, folder_ids, seen, folder_visibilities, current_path) }}
    {% elseif user_group < 4 or folder_visibilities[current_path] %}
        <div class="folder-container">
            <div class="div-viewer view-row">
                <a class="openAllDiv key_to_click openAllDivsubmissions openable-element-submissions" id="{{ name }}" onclick="setFolderCookie('{{ folder_path }}', '{{ id }}', toggleCMFolder('{{ id }}'))" tabindex="0">
                    <span  class="fas fa-folder open-all-folder" style="vertical-align: text-top; font-size: 20px"></span>
                    {{ name }}
                </a>
                <a onclick="downloadCourseMaterialZip('{{ folder_ids[folder_path] }}')" aria-label="Download the folder: {{ name }}" class="key_to_click" tabindex="0"><i class="fas fa-download" title="Download the folder"></i></a>
                {% if user_group == 1 %}
                    <a class="key_to_click" tabindex="0" onclick='newEditCourseMaterialsFolderForm(this)' data-id="{{ folder_ids[folder_path] }}" data-priority="{{ directory_priorities[folder_path] }}"> <i class="fas fa-pencil-alt black-btn" aria-hidden="true" style="font-size: 16px; margin: 5px;"></i></a>
                    <a class="key_to_click" tabindex="0" onclick='newDeleteCourseMaterialForm("{{ folder_ids[folder_path]  }}", "{{ name }}", "{{ id }}");'> <i class="fas fa-trash" aria-hidden="true" style="font-size: 16px; margin: 5px;"></i></a>
                    <a onclick='setFolderRelease("{{ folder_path }}","","{{ id }}","{{ folder_ids[folder_path] }}")' class="btn btn-primary key_to_click" tabindex="0">Set Folder Release Date</a>
                {% endif %}
                {% if not seen[folder_path] %}
                    <span class="badge course-material-badge" >NEW</span>
                {% endif %}
            </div>
            <div id="div_viewer_{{ id }}" style="margin-left: 15px; display: none" data-file_name="{{ name }}">
                {{ _self.display_files(course_materials, links, user_group, user_section, id, indent + 1, display_file_url, path, folder_path,
                directory_priorities, material_list, date_format, folder_ids, seen, folder_visibilities, current_path) }}
            </div>
        </div>
    {% endif %}
{% endmacro %}

<script>
    function setFolderCookie(folderPath, id, open) {
        const folderData = JSON.parse(Cookies.get('cm_folder_data') || '{}');
        folderData[folderPath] = { id, open };
        Cookies.set('cm_folder_data', JSON.stringify(folderData));
    }

    function toggleFoldersOpen(){
        Cookies.remove('cm_folder_data');
        Cookies.set("foldersOpen", toggleCMFolders());
    }
    {% if user_group == 1 %}

        function handleHideMaterialsCheckboxChange(clicked) {
            const warningIds = {"hide-materials-checkbox": "upload-form", "hide-materials-checkbox-edit": "edit-form", "hide-folder-materials-checkbox-edit": "edit-folder-form"};
            var callerId = clicked.target ? clicked.target.id : clicked; //can be an event or id itself
            var caller = $('#'+callerId);
            var warningMessage = $('#'+warningIds[callerId]+'-hide-warning');
            if (caller.hasClass('partial-checkbox')) {
                caller.removeClass('partial-checkbox');
                caller.siblings()[0].remove();
                if (caller.attr('class') === '') {
                    caller.removeAttr('class');
                }
                caller.prop('checked', true);
            }
            if(caller.is(':checked') && warningMessage.length === 0) {
                var callerParentNext = caller.parent().next().get(0);
                callerParentNext.insertAdjacentHTML(
                    'afterend',
                    '<span id="'+warningIds[callerId]+`-hide-warning" class="red-message full-width mt-0">\nWarning:
                    Students can view the hidden course material by guessing the corresponding
                    course material ID (a simple number). It is recommended to instead use the release date feature
                    if it is necessary to prevent students from accessing course materials.\n</span>`
                );
            }
            else if(caller.is(':not(:checked)')) {
                warningMessage.remove();
            }
        }

    {% endif %}

    window.onload = function () {
        //determine if folders have been left open or closed
        const foldersOpen = Boolean(JSON.parse(Cookies.get('foldersOpen') || 'false'));
        const folderData = JSON.parse(Cookies.get('cm_folder_data') || '{}');
        //open/close folders on screen as directed
        toggleCMFolders(foldersOpen);
        for (const data of Object.values(folderData)) {
            if (!data.open === foldersOpen) {
                toggleCMFolder(data.id, !foldersOpen);
            }
        }
        // loop thru each div_viewer_xxx
        var jumpToScrollPosition = Cookies.get('jumpToScrollPosition') || '';
        {% if user_group == 1 %}
            var topFolderMatcher = new RegExp('^div_viewer_sd[0-9]{0,}$');
            const partiallyHidden = 2;

            // accepts an element (editButton) having required data attributes; other parameters represent the properties known to be common until now
            // returns an updated set of common props by comparing with the props of the given element
            function folderCommonProps(editButton, commonSections, releaseTime, hiddenState, first, hiddenStateMismatch, releaseTimeMismatch) {
                let residualSections = [];
                if (first) {
                    commonSections = editButton.data('sections');
                    releaseTime = editButton.data('release-time');
                    hiddenState = editButton.data('hidden-state');
                    first = false;
                }
                else {
                    let combinedSections = [...(new Set([...commonSections, ...editButton.data('sections')]))];
                    commonSections = commonSections.filter(x => {return editButton.data('sections').includes(x);});
                    residualSections = combinedSections.filter(x => {return !commonSections.includes(x);});
                    if (!releaseTimeMismatch) {
                        if (editButton.data('release-time') !== releaseTime) {
                            releaseTimeMismatch = true;
                            releaseTime = '';
                        }
                    }
                    if (!hiddenStateMismatch) {
                        if (editButton.data('hidden-state') !== hiddenState) {
                            hiddenStateMismatch = true;
                            hiddenState = '';
                        }
                    }
                }
                return [commonSections, residualSections, releaseTime, hiddenState, first, hiddenStateMismatch, releaseTimeMismatch];
            }

            // sets the common properties of a given folder
            function folderSetter(elem) {
                let insideFileMatcher = new RegExp(`^${elem.attr("id").replace("div", "file")}f[0-9]{0,}$`);
                let insideFolderMatcher = new RegExp(`^${elem.attr("id")}d[0-9]{0,}$`);
                let first = true;
                let commonSections = [];
                let residualSections = [];
                let partialSections = [];
                let releaseTime = "";
                let hiddenState = '';
                let hiddenStateMismatch = false;
                let releaseTimeMismatch = false;
                $(`.folder-container > [id^=${elem.attr("id")}d]`, elem).each(function() {
                    if (insideFolderMatcher.test($(this).attr('id'))) {
                        folderSetter($(this));
                        let fEditButton = $(this).siblings('.div-viewer').children('a[onclick^=newEditCourseMaterialsFolderForm]');
                        partialSections.push(...fEditButton.data('partial-sections'));
                        [commonSections, residualSections, releaseTime, hiddenState, first, hiddenStateMismatch, releaseTimeMismatch] = folderCommonProps(fEditButton, commonSections, releaseTime, hiddenState, first, hiddenStateMismatch, releaseTimeMismatch);
                        partialSections.push(...residualSections);
                    }
                });
                $(`.file-container > .file-viewer > a[onclick^=newEditCourseMaterialsForm]`, elem).each(function() {
                    if (insideFileMatcher.test($(this).parent('.file-viewer').siblings('.file-viewer-data').attr('id'))) {
                        [commonSections, residualSections, releaseTime, hiddenState, first, hiddenStateMismatch, releaseTimeMismatch] = folderCommonProps($(this), commonSections, releaseTime, hiddenState, first, hiddenStateMismatch, releaseTimeMismatch);
                        partialSections.push(...residualSections);
                    }
                });
                let editButton = $(elem.siblings('.div-viewer').children('a[onclick^=newEditCourseMaterialsFolderForm]'));
                editButton.attr('data-sections', JSON.stringify(commonSections));
                editButton.attr('data-partial-sections', JSON.stringify(partialSections));
                editButton.attr('data-release-time', releaseTime);
                if (hiddenStateMismatch) {
                    hiddenState = partiallyHidden;
                }
                editButton.attr('data-hidden-state', hiddenState);
            }

            function callFolderSetter(elem) {
                if (topFolderMatcher.test(elem.id)) {
                    folderSetter($(elem));
                }
            }
        {% endif %}

        // set folder data for instructor
        {% if user_group == 1 %}
            $('[id^=div_viewer_]').each(function() { callFolderSetter(this) });
        {% endif %}

        if (jumpToScrollPosition.length > 0 && jumpToScrollPosition != '-1') {
            const cm_ids = (Cookies.get('cm_data') || '').split('|').filter(n=>n.length);
            for (const cm_id of cm_ids) {
                toggleCMFolder(cm_id);
            }
            // jump to last location if scroll is enabled.
            window.scrollTo(0, jumpToScrollPosition);
            Cookies.set('jumpToScrollPosition', -1);
        }

        // clean up cm data cookie
        Cookies.remove('cm_data');

        {% if user_group == 1 %}

            $('#hide-materials-checkbox').on('change', handleHideMaterialsCheckboxChange);
            $('#hide-materials-checkbox-edit').on('change', handleHideMaterialsCheckboxChange);
            $('[id^="section-folder-edit"]').on('change', function() {
                if ($(this).hasClass('partial-checkbox')) {
                    $(this).removeClass('partial-checkbox');
                    if ($(this).attr('class') === '') {
                        $(this).removeAttr('class');
                    }
                    $(this).prop('checked', true);
                }
            })

        {% endif %}
    };

</script>


{% include('course/SetFolderReleaseForm.twig') %}
{% include 'course/UploadCourseMaterialsForm.twig' with {reg_sections: reg_sections} %}
{% include 'course/EditCourseMaterialsForm.twig' %}
{% include 'course/EditCourseMaterialsFolderForm.twig' %}
{% include('course/DeleteCourseMaterialForm.twig') %}
{% include 'course/OverwriteCourseMaterialForm.twig' %}
{% include('course/SetAllReleaseForm.twig') %}
